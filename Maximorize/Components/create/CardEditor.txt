import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { UploadFile } from "@/integrations/Core";
import { Image, Upload, X, Tag, Sparkles } from "lucide-react";
import { motion } from "framer-motion";

export default function CardEditor({ cardData, setCardData, disabled }) {
  const [newTag, setNewTag] = useState("");
  const [uploading, setUploading] = useState({ question: false, answer: false });

  const handleImageUpload = async (file, type) => {
    if (!file) return;
    
    setUploading(prev => ({ ...prev, [type]: true }));
    try {
      const { file_url } = await UploadFile({ file });
      setCardData(prev => ({
        ...prev,
        [`${type}_image`]: file_url
      }));
    } catch (error) {
      console.error('Error uploading image:', error);
    }
    setUploading(prev => ({ ...prev, [type]: false }));
  };

  const removeImage = (type) => {
    setCardData(prev => ({
      ...prev,
      [`${type}_image`]: ""
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !cardData.tags.includes(newTag.trim())) {
      setCardData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag("");
    }
  };

  const removeTag = (tagToRemove) => {
    setCardData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      <Card className="glass-effect shadow-xl border-0">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="w-5 h-5 text-purple-600" />
            Card Content
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="question" className="w-full">
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="question" className="flex items-center gap-2">
                Question Side
              </TabsTrigger>
              <TabsTrigger value="answer" className="flex items-center gap-2">
                Answer Side
              </TabsTrigger>
            </TabsList>

            <TabsContent value="question" className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Question Text</label>
                <Textarea
                  placeholder="Enter your question here..."
                  value={cardData.question_text}
                  onChange={(e) => setCardData(prev => ({ ...prev, question_text: e.target.value }))}
                  disabled={disabled}
                  className="min-h-32 resize-none"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Question Image (Optional)</label>
                {cardData.question_image ? (
                  <div className="relative">
                    <img
                      src={cardData.question_image}
                      alt="Question"
                      className="w-full h-48 object-cover rounded-lg"
                    />
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => removeImage('question')}
                      className="absolute top-2 right-2"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                ) : (
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleImageUpload(e.target.files[0], 'question')}
                      className="hidden"
                      id="question-image"
                      disabled={disabled || uploading.question}
                    />
                    <label htmlFor="question-image" className="cursor-pointer">
                      <Image className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500">
                        {uploading.question ? 'Uploading...' : 'Click to upload image'}
                      </p>
                    </label>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="answer" className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Answer Text</label>
                <Textarea
                  placeholder="Enter your answer here..."
                  value={cardData.answer_text}
                  onChange={(e) => setCardData(prev => ({ ...prev, answer_text: e.target.value }))}
                  disabled={disabled}
                  className="min-h-32 resize-none"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Answer Image (Optional)</label>
                {cardData.answer_image ? (
                  <div className="relative">
                    <img
                      src={cardData.answer_image}
                      alt="Answer"
                      className="w-full h-48 object-cover rounded-lg"
                    />
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => removeImage('answer')}
                      className="absolute top-2 right-2"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                ) : (
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleImageUpload(e.target.files[0], 'answer')}
                      className="hidden"
                      id="answer-image"
                      disabled={disabled || uploading.answer}
                    />
                    <label htmlFor="answer-image" className="cursor-pointer">
                      <Image className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-500">
                        {uploading.answer ? 'Uploading...' : 'Click to upload image'}
                      </p>
                    </label>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>

          {/* Card Settings */}
          <div className="mt-6 pt-6 border-t border-gray-200 space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Difficulty</label>
                <Select
                  value={cardData.difficulty}
                  onValueChange={(value) => setCardData(prev => ({ ...prev, difficulty: value }))}
                  disabled={disabled}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">Easy</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Hard</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Tags</label>
                <div className="flex gap-2">
                  <Input
                    placeholder="Add tag"
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addTag()}
                    disabled={disabled}
                  />
                  <Button onClick={addTag} disabled={disabled} size="icon" variant="outline">
                    <Tag className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>

            {cardData.tags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {cardData.tags.map((tag) => (
                  <Badge key={tag} variant="secondary" className="flex items-center gap-1">
                    {tag}
                    <X
                      className="w-3 h-3 cursor-pointer"
                      onClick={() => removeTag(tag)}
                    />
                  </Badge>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}