import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { BookOpen, FileText, Search, Eye, EyeOff } from "lucide-react";
import { motion } from "framer-motion";
import { Skeleton } from "@/components/ui/skeleton";

export default function AllCardsView({
  cards,
  subjects,
  topics,
  getSubjectName,
  getTopicName,
  isLoading
}) {
  const [searchTerm, setSearchTerm] = useState("");
  const [visibleAnswers, setVisibleAnswers] = useState(new Set());

  const toggleAnswerVisibility = (cardId) => {
    const newVisible = new Set(visibleAnswers);
    if (newVisible.has(cardId)) {
      newVisible.delete(cardId);
    } else {
      newVisible.add(cardId);
    }
    setVisibleAnswers(newVisible);
  };

  const toggleAllAnswers = () => {
    if (visibleAnswers.size === cards.length) {
      setVisibleAnswers(new Set());
    } else {
      setVisibleAnswers(new Set(cards.map(card => card.id)));
    }
  };

  const filteredCards = cards.filter(card =>
    card.question_text.toLowerCase().includes(searchTerm.toLowerCase()) ||
    card.answer_text.toLowerCase().includes(searchTerm.toLowerCase()) ||
    getSubjectName(card.subject_id).toLowerCase().includes(searchTerm.toLowerCase()) ||
    getTopicName(card.topic_id).toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (isLoading) {
    return (
      <div className="space-y-6">
        {[...Array(3)].map((_, i) => (
          <Card key={i} className="glass-effect shadow-xl border-0">
            <CardContent className="p-6">
              <Skeleton className="h-32 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="space-y-6"
    >
      {/* Search and Controls */}
      <Card className="glass-effect shadow-xl border-0">
        <CardHeader>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="w-6 h-6 text-blue-600" />
              All Flashcards ({filteredCards.length})
            </CardTitle>
            <div className="flex gap-3 w-full md:w-auto">
              <div className="relative flex-1 md:w-64">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="Search cards..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Button
                variant="outline"
                onClick={toggleAllAnswers}
                className="whitespace-nowrap"
              >
                {visibleAnswers.size === cards.length ? (
                  <>
                    <EyeOff className="w-4 h-4 mr-2" />
                    Hide All
                  </>
                ) : (
                  <>
                    <Eye className="w-4 h-4 mr-2" />
                    Show All
                  </>
                )}
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Cards Display */}
      <div className="space-y-4">
        {filteredCards.length === 0 ? (
          <Card className="glass-effect shadow-xl border-0">
            <CardContent className="p-12 text-center">
              <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-800 mb-2">No Cards Found</h3>
              <p className="text-gray-600">
                {searchTerm ? "No cards match your search criteria." : "No flashcards available."}
              </p>
            </CardContent>
          </Card>
        ) : (
          filteredCards.map((card, index) => (
            <motion.div
              key={card.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
            >
              <Card className="glass-effect shadow-lg border-0 hover:shadow-xl transition-all duration-300">
                <CardContent className="p-6">
                  {/* Card Header */}
                  <div className="flex flex-wrap items-center justify-between gap-3 mb-4">
                    <div className="flex flex-wrap items-center gap-2">
                      <Badge className="bg-blue-100 text-blue-800">
                        <BookOpen className="w-3 h-3 mr-1" />
                        {getSubjectName(card.subject_id)}
                      </Badge>
                      <Badge className="bg-purple-100 text-purple-800">
                        <FileText className="w-3 h-3 mr-1" />
                        {getTopicName(card.topic_id)}
                      </Badge>
                      <Badge 
                        className={
                          card.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                          card.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }
                      >
                        {card.difficulty}
                      </Badge>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleAnswerVisibility(card.id)}
                      className="text-gray-500 hover:text-gray-700"
                    >
                      {visibleAnswers.has(card.id) ? (
                        <EyeOff className="w-4 h-4" />
                      ) : (
                        <Eye className="w-4 h-4" />
                      )}
                    </Button>
                  </div>

                  {/* Question and Answer */}
                  <div className="grid md:grid-cols-2 gap-6">
                    {/* Question Side */}
                    <div className="space-y-3">
                      <h4 className="font-semibold text-blue-700 flex items-center gap-2">
                        Question
                      </h4>
                      <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl border border-blue-200">
                        {card.question_image && (
                          <img
                            src={card.question_image}
                            alt="Question"
                            className="w-full h-32 object-cover rounded-lg mb-3"
                          />
                        )}
                        <p className="text-gray-800 leading-relaxed">
                          {card.question_text}
                        </p>
                      </div>
                    </div>

                    {/* Answer Side */}
                    <div className="space-y-3">
                      <h4 className="font-semibold text-green-700 flex items-center gap-2">
                        Answer
                        {!visibleAnswers.has(card.id) && (
                          <span className="text-xs text-gray-500">(Hidden)</span>
                        )}
                      </h4>
                      <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl border border-green-200">
                        {visibleAnswers.has(card.id) ? (
                          <>
                            {card.answer_image && (
                              <img
                                src={card.answer_image}
                                alt="Answer"
                                className="w-full h-32 object-cover rounded-lg mb-3"
                              />
                            )}
                            <p className="text-gray-800 leading-relaxed">
                              {card.answer_text}
                            </p>
                          </>
                        ) : (
                          <div className="flex items-center justify-center h-16 text-gray-400">
                            <EyeOff className="w-6 h-6 mr-2" />
                            Click the eye icon to reveal answer
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Tags */}
                  {card.tags && card.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mt-4">
                      {card.tags.map((tag) => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          ))
        )}
      </div>
    </motion.div>
  );
}