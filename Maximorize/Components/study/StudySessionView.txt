import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { 
  Brain, 
  RotateCcw, 
  CheckCircle, 
  X, 
  ArrowRight, 
  ArrowLeft,
  Target,
  TrendingUp,
  Clock,
  Pause,
  Play
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function StudySessionView({ cards, studyMode, onEndSession }) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [stats, setStats] = useState({ correct: 0, incorrect: 0, total: 0 });
  const [sessionComplete, setSessionComplete] = useState(false);
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const [cardStartTime, setCardStartTime] = useState(Date.now());

  useEffect(() => {
    const timer = setInterval(() => {
      if (!isPaused && !sessionComplete) {
        setTimeElapsed(prev => prev + 1);
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [isPaused, sessionComplete]);

  const currentCard = cards[currentIndex];
  const progress = ((currentIndex + 1) / cards.length) * 100;
  const accuracy = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;

  const nextCard = (wasCorrect = null) => {
    if (wasCorrect !== null) {
      setStats(prev => ({
        correct: prev.correct + (wasCorrect ? 1 : 0),
        incorrect: prev.incorrect + (wasCorrect ? 0 : 1),
        total: prev.total + 1
      }));
    }

    if (currentIndex < cards.length - 1) {
      setCurrentIndex(prev => prev + 1);
      setShowAnswer(false);
      setCardStartTime(Date.now());
    } else {
      setSessionComplete(true);
    }
  };

  const prevCard = () => {
    if (currentIndex > 0) {
      setCurrentIndex(prev => prev - 1);
      setShowAnswer(false);
    }
  };

  const resetSession = () => {
    setCurrentIndex(0);
    setShowAnswer(false);
    setStats({ correct: 0, incorrect: 0, total: 0 });
    setSessionComplete(false);
    setTimeElapsed(0);
    setCardStartTime(Date.now());
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (sessionComplete) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="max-w-2xl mx-auto"
      >
        <Card className="glass-effect shadow-2xl border-0 text-center">
          <CardContent className="p-12">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-green-400 to-emerald-500 flex items-center justify-center">
              <CheckCircle className="w-12 h-12 text-white" />
            </div>
            
            <h2 className="text-3xl font-bold text-gray-800 mb-4">
              Session Complete!
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{cards.length}</div>
                <div className="text-sm text-gray-600">Cards Studied</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{stats.correct}</div>
                <div className="text-sm text-gray-600">Correct</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{accuracy.toFixed(0)}%</div>
                <div className="text-sm text-gray-600">Accuracy</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">{formatTime(timeElapsed)}</div>
                <div className="text-sm text-gray-600">Time</div>
              </div>
            </div>

            <div className="flex gap-3 justify-center">
              <Button
                onClick={resetSession}
                variant="outline"
                className="border-2 border-blue-500 text-blue-600 hover:bg-blue-50"
              >
                <RotateCcw className="w-4 h-4 mr-2" />
                Study Again
              </Button>
              <Button
                onClick={onEndSession}
                className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
              >
                <CheckCircle className="w-4 h-4 mr-2" />
                Finish Session
              </Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    );
  }

  if (!currentCard) {
    return null;
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Progress Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <Card className="glass-effect shadow-xl border-0">
          <CardContent className="p-6">
            <div className="grid md:grid-cols-4 gap-4 text-center">
              <div className="flex items-center justify-center gap-2">
                <Target className="w-5 h-5 text-blue-600" />
                <div>
                  <div className="font-bold text-gray-800">{currentIndex + 1} / {cards.length}</div>
                  <div className="text-sm text-gray-600">Progress</div>
                </div>
              </div>
              <div className="flex items-center justify-center gap-2">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <div>
                  <div className="font-bold text-green-600">{stats.correct}</div>
                  <div className="text-sm text-gray-600">Correct</div>
                </div>
              </div>
              <div className="flex items-center justify-center gap-2">
                <TrendingUp className="w-5 h-5 text-purple-600" />
                <div>
                  <div className="font-bold text-purple-600">{accuracy.toFixed(0)}%</div>
                  <div className="text-sm text-gray-600">Accuracy</div>
                </div>
              </div>
              <div className="flex items-center justify-center gap-2">
                <Clock className="w-5 h-5 text-orange-600" />
                <div>
                  <div className="font-bold text-orange-600">{formatTime(timeElapsed)}</div>
                  <div className="text-sm text-gray-600">Time</div>
                </div>
              </div>
            </div>
            <Progress value={progress} className="h-2 mt-4" />
          </CardContent>
        </Card>
      </motion.div>

      {/* Flashcard */}
      <AnimatePresence mode="wait">
        <motion.div
          key={`${currentIndex}-${showAnswer}`}
          initial={{ opacity: 0, rotateY: -90 }}
          animate={{ opacity: 1, rotateY: 0 }}
          exit={{ opacity: 0, rotateY: 90 }}
          transition={{ duration: 0.4 }}
          className="cursor-pointer"
          onClick={() => !showAnswer && setShowAnswer(true)}
        >
          <Card className="glass-effect shadow-2xl border-0 min-h-[500px] hover:shadow-3xl transition-all duration-300">
            <CardContent className="p-8 h-full flex flex-col">
              <div className="flex justify-between items-start mb-6">
                <Badge 
                  variant="outline"
                  className={`text-lg px-4 py-2 ${
                    showAnswer ? 'bg-green-100 text-green-800 border-green-300' : 'bg-blue-100 text-blue-800 border-blue-300'
                  }`}
                >
                  {showAnswer ? 'Answer' : 'Question'}
                </Badge>
                <div className="flex gap-2">
                  <Badge 
                    className={
                      currentCard.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                      currentCard.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }
                  >
                    {currentCard.difficulty}
                  </Badge>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={(e) => {
                      e.stopPropagation();
                      setIsPaused(!isPaused);
                    }}
                  >
                    {isPaused ? <Play className="w-4 h-4" /> : <Pause className="w-4 h-4" />}
                  </Button>
                </div>
              </div>

              <div className="flex-1 flex flex-col justify-center">
                {!showAnswer ? (
                  <div className="text-center">
                    {currentCard.question_image && (
                      <img
                        src={currentCard.question_image}
                        alt="Question"
                        className="w-full max-h-64 object-cover rounded-lg mb-6"
                      />
                    )}
                    <p className="text-2xl text-gray-800 leading-relaxed mb-8">
                      {currentCard.question_text}
                    </p>
                    <p className="text-gray-500 text-lg">Click anywhere to reveal answer</p>
                  </div>
                ) : (
                  <div className="text-center">
                    {currentCard.answer_image && (
                      <img
                        src={currentCard.answer_image}
                        alt="Answer"
                        className="w-full max-h-64 object-cover rounded-lg mb-6"
                      />
                    )}
                    <p className="text-2xl text-gray-800 leading-relaxed">
                      {currentCard.answer_text}
                    </p>
                  </div>
                )}
              </div>

              {currentCard.tags && currentCard.tags.length > 0 && (
                <div className="flex flex-wrap justify-center gap-2 mt-6">
                  {currentCard.tags.map((tag) => (
                    <Badge key={tag} variant="secondary" className="text-sm">
                      {tag}
                    </Badge>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </AnimatePresence>

      {/* Controls */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex justify-center gap-4"
      >
        {currentIndex > 0 && (
          <Button
            onClick={prevCard}
            variant="outline"
            className="hover:bg-gray-50"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Previous
          </Button>
        )}

        {!showAnswer ? (
          <Button
            onClick={() => setShowAnswer(true)}
            className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-8"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            Show Answer
          </Button>
        ) : (
          <div className="flex gap-4">
            <Button
              onClick={() => nextCard(false)}
              variant="outline"
              className="border-2 border-red-500 text-red-600 hover:bg-red-50"
            >
              <X className="w-4 h-4 mr-2" />
              Incorrect
            </Button>
            <Button
              onClick={() => nextCard(true)}
              className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white"
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              Correct
            </Button>
          </div>
        )}

        {currentIndex < cards.length - 1 && showAnswer && (
          <Button
            onClick={() => nextCard()}
            variant="outline"
            className="hover:bg-gray-50"
          >
            Next
            <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        )}
      </motion.div>
    </div>
  );
}