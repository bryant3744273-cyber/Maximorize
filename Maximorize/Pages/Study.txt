import React, { useState, useEffect } from "react";
import { Subject, Topic, Flashcard } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Brain, ArrowLeft, Filter, Shuffle } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import StudyModeSelector from "../components/study/StudyModeSelector";
import StudySessionView from "../components/study/StudySessionView";
import AllCardsView from "../components/study/AllCardsView";
import StudyFilters from "../components/study/StudyFilters";

export default function StudyPage() {
  const [subjects, setSubjects] = useState([]);
  const [topics, setTopics] = useState([]);
  const [flashcards, setFlashcards] = useState([]);
  const [filteredCards, setFilteredCards] = useState([]);
  const [selectedSubject, setSelectedSubject] = useState("");
  const [selectedTopic, setSelectedTopic] = useState("");
  const [selectedDifficulty, setSelectedDifficulty] = useState("");
  const [isStudying, setIsStudying] = useState(false);
  const [studyMode, setStudyMode] = useState("interactive"); // "interactive" or "review"
  const [currentView, setCurrentView] = useState("selector"); // "selector", "all", "studying"
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    let filtered = [...flashcards];
    
    if (selectedSubject) {
      filtered = filtered.filter(card => card.subject_id === selectedSubject);
    }
    
    if (selectedTopic) {
      filtered = filtered.filter(card => card.topic_id === selectedTopic);
    }
    
    if (selectedDifficulty) {
      filtered = filtered.filter(card => card.difficulty === selectedDifficulty);
    }
    
    setFilteredCards(filtered);
  }, [selectedSubject, selectedTopic, selectedDifficulty, flashcards]);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [subjectsData, topicsData, flashcardsData] = await Promise.all([
        Subject.list("-created_date"),
        Topic.list("-created_date"),
        Flashcard.list("-created_date")
      ]);
      setSubjects(subjectsData);
      setTopics(topicsData);
      setFlashcards(flashcardsData);
    } catch (error) {
      console.error('Error loading data:', error);
    }
    setIsLoading(false);
  };

  const startStudying = (mode = "interactive") => {
    setStudyMode(mode);
    setIsStudying(true);
    setCurrentView("studying");
  };

  const viewAllCards = () => {
    setCurrentView("all");
  };

  const backToSelector = () => {
    setCurrentView("selector");
    setIsStudying(false);
  };

  const shuffleCards = () => {
    const shuffled = [...filteredCards].sort(() => Math.random() - 0.5);
    setFilteredCards(shuffled);
  };

  const getSubjectName = (subjectId) => {
    const subject = subjects.find(s => s.id === subjectId);
    return subject ? subject.name : 'Unknown Subject';
  };

  const getTopicName = (topicId) => {
    const topic = topics.find(t => t.id === topicId);
    return topic ? topic.name : 'Unknown Topic';
  };

  return (
    <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-between mb-8"
        >
          <div className="flex items-center gap-4">
            {currentView !== "selector" && (
              <Button
                variant="outline"
                size="icon"
                onClick={backToSelector}
                className="hover:bg-white/80 hover:shadow-md transition-all duration-300"
              >
                <ArrowLeft className="w-4 h-4" />
              </Button>
            )}
            <div>
              <h1 className="text-4xl font-bold text-gray-800 mb-2">
                Study Mode
              </h1>
              <p className="text-gray-600 text-lg">
                {currentView === "all" ? "Review all your flashcards" :
                 currentView === "studying" ? "Interactive study session" :
                 "Choose your study preferences"}
              </p>
            </div>
          </div>

          {currentView === "selector" && (
            <div className="flex gap-3">
              <Button
                onClick={viewAllCards}
                variant="outline"
                className="border-2 border-blue-500 text-blue-600 hover:bg-blue-50 shadow-md hover:shadow-lg transition-all duration-300"
              >
                <Filter className="w-5 h-5 mr-2" />
                View All Cards
              </Button>
              {filteredCards.length > 0 && (
                <Button
                  onClick={() => startStudying("interactive")}
                  className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
                >
                  <Brain className="w-5 h-5 mr-2" />
                  Start Studying
                </Button>
              )}
            </div>
          )}

          {currentView === "all" && (
            <div className="flex gap-3">
              <Button
                onClick={shuffleCards}
                variant="outline"
                className="border-2 border-purple-500 text-purple-600 hover:bg-purple-50"
              >
                <Shuffle className="w-5 h-5 mr-2" />
                Shuffle Cards
              </Button>
              {filteredCards.length > 0 && (
                <Button
                  onClick={() => startStudying("interactive")}
                  className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
                >
                  <Brain className="w-5 h-5 mr-2" />
                  Start Studying
                </Button>
              )}
            </div>
          )}
        </motion.div>

        <AnimatePresence mode="wait">
          {currentView === "selector" && (
            <motion.div
              key="selector"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="space-y-6"
            >
              <StudyFilters
                subjects={subjects}
                topics={topics}
                selectedSubject={selectedSubject}
                selectedTopic={selectedTopic}
                selectedDifficulty={selectedDifficulty}
                onSubjectChange={setSelectedSubject}
                onTopicChange={setSelectedTopic}
                onDifficultyChange={setSelectedDifficulty}
                isLoading={isLoading}
              />

              <StudyModeSelector
                filteredCards={filteredCards}
                selectedSubject={selectedSubject}
                selectedTopic={selectedTopic}
                getSubjectName={getSubjectName}
                getTopicName={getTopicName}
                onStartStudying={startStudying}
                onViewAllCards={viewAllCards}
              />
            </motion.div>
          )}

          {currentView === "all" && (
            <motion.div
              key="all-cards"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
            >
              <AllCardsView
                cards={filteredCards}
                subjects={subjects}
                topics={topics}
                getSubjectName={getSubjectName}
                getTopicName={getTopicName}
                isLoading={isLoading}
              />
            </motion.div>
          )}

          {currentView === "studying" && (
            <motion.div
              key="studying"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <StudySessionView
                cards={filteredCards}
                studyMode={studyMode}
                onEndSession={backToSelector}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}