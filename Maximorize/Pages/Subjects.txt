import React, { useState, useEffect } from "react";
import { Subject, Topic } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, BookOpen, FileText } from "lucide-react";
import { motion } from "framer-motion";

import SubjectCard from "../components/subjects/SubjectCard";
import CreateSubjectDialog from "../components/subjects/CreateSubjectDialog";
import EditSubjectDialog from "../components/subjects/EditSubjectDialog";

export default function SubjectsPage() {
  const [subjects, setSubjects] = useState([]);
  const [topics, setTopics] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [editingSubject, setEditingSubject] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      const [subjectsData, topicsData] = await Promise.all([
        Subject.list("-created_date"),
        Topic.list()
      ]);
      setSubjects(subjectsData);
      setTopics(topicsData);
    } catch (error) {
      console.error('Error loading data:', error);
    }
    setIsLoading(false);
  };

  const handleEdit = (subject) => {
    setEditingSubject(subject);
    setShowEditDialog(true);
  };

  const handleDelete = async (subjectId) => {
    if (window.confirm("Are you sure you want to delete this subject and all its topics and flashcards? This action cannot be undone.")) {
      try {
        // You might want to also delete associated topics and flashcards in a real app
        await Subject.delete(subjectId);
        loadData();
      } catch (error) {
        console.error('Error deleting subject:', error);
      }
    }
  };

  return (
    <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)' }}>
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex justify-between items-center mb-8"
        >
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Subject Management</h1>
            <p className="text-gray-600">Organize your learning materials by subject and topic</p>
          </div>
          <Button
            onClick={() => setShowCreateDialog(true)}
            className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
          >
            <Plus className="w-5 h-5 mr-2" />
            Create Subject
          </Button>
        </motion.div>

        {/* Subjects Grid */}
        {isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-48 bg-gray-200 rounded-xl animate-pulse" />
            ))}
          </div>
        ) : subjects.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {subjects.map((subject, index) => (
              <SubjectCard
                key={subject.id}
                subject={subject}
                topicsCount={topics.filter(t => t.subject_id === subject.id).length}
                index={index}
                onEdit={() => handleEdit(subject)}
                onDelete={() => handleDelete(subject.id)}
              />
            ))}
          </div>
        ) : (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center py-16"
          >
            <Card className="glass-effect shadow-xl border-0 max-w-md mx-auto">
              <CardContent className="p-8">
                <BookOpen className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 mb-2">No Subjects Yet</h3>
                <p className="text-gray-600 mb-6">Create your first subject to start organizing your flashcards</p>
                <Button
                  onClick={() => setShowCreateDialog(true)}
                  className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Create First Subject
                </Button>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>

      <CreateSubjectDialog
        open={showCreateDialog}
        onOpenChange={setShowCreateDialog}
        onSuccess={loadData}
      />
      {editingSubject && (
        <EditSubjectDialog
          open={showEditDialog}
          onOpenChange={setShowEditDialog}
          subject={editingSubject}
          onSuccess={() => {
            setShowEditDialog(false);
            loadData();
          }}
        />
      )}
    </div>
  );
}